<?php

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */


class pwf_settings {
    // PowerWAF Settings:
    //  api_user  string

    private $powerwaf_settings_options;

    public function __construct() {
        add_action( 'admin_menu', array( $this, 'powerwaf_settings_add_plugin_page' ) );
        add_action( 'admin_init', array( $this, 'powerwaf_settings_page_init' ) );

    }

    public function powerwaf_settings_add_plugin_page() {
        add_submenu_page(
            'pwf_powerwaf',
            'PowerWAF settings', //page title
            'Settings', //menu title
            'manage_options', //capability,
            'pwaf_settings',//menu slug
             array( $this, 'render_page' ), // function
            75 // position
        );
    }

    public function render_page() {

        $this->powerwaf_settings_options = get_option( 'powerwaf_settings' );
        $options = $this->powerwaf_settings_options;

        // Redirect to settings if something is missing there.
        if (empty($options['api_user']) or empty($options['api_password']) or empty($options['domain'])) {
            $this->powerwaf_settings_render_page();
            return;
        }

        $this->powerwaf_settings_render_page();
    }


    public function powerwaf_settings_render_page() {
       // add_action( 'admin_footer', array($this,'inject_js') ); // Write our JS below here

        pwf_dashboard::startPage('PowerWAF CDN Settings');
        settings_errors();
        $action=sanitize_key($_GET['action']);
        $options = $this->powerwaf_settings_options;


        // Add site if apply. If error occurs, show error message and return.
        if ('addsite' == $action) {
            $response=pwf_powerwaf::Request('/api/sites/add',$options['api_user'],$options['api_password'], [ 'site' => $options['domain'] ]);
            if ('error' == $response->status) {
                $this->renderError($response);
                pwf_dashboard::endPage();
                return;
            }
        }

        // Request domain status. If status is ok, enable dynamic cache if disabled.
        if (!empty($options['api_user']) and  !empty($options['api_password']) and  !empty($options['domain'])) {
            $response=pwf_powerwaf::Request('/api/sites/get',$options['api_user'],$options['api_password'], [ 'site' => $options['domain'] ]);
            if ('error' == $response->status ) {
                $this->renderError($response);
            } else {
                //error_log(print_r($response,true));
                $sendRequest=false;
                $clearCache=false;
                // If dynamic cache is not active, we activate it
                if (!$response->data->DCache->enabled || $response->data->DCache->preset!=1) {
                    $sendRequest=true;
                }
                // Modify "Cache by device type", "Disable front end caching for logged in users" and clear cache if apply
                if ($response->data->DCache->CacheByDeviceType != $options['devicetypecache']) {
                    $sendRequest=true;
                    $clearCache=true;
                }
                if ($response->data->DCache->DisableWPFrontendCacheAdmin != $options['disablefrontendcacheadmin']) {
                    $sendRequest=true;
                }

                if ($sendRequest) {
                    powerwaf_set_dcache_config(true,1,(bool)$options['devicetypecache'],(bool)$options['disablefrontendcacheadmin']);
                }
                if ($clearCache) {
                    pwf_powerwaf::clearCache('/*');
                }

                // Show DNS final configuration step if necessary.
                if ($response->data->assignedCname!=$response->data->registeredCname) {
                    echo <<<HTML
                    <div class="columns">
                        <div class="column xis-half">
                                <div style="background-color: white; padding: 15px; border: 1px solid black; border-left: 4px solid darkgoldenrod">
                                    <strong>Only one step to go!</strong> For your domain to be linked to PowerWAF CDN, you need to modify one of your DNS records. 
                                    Check the instructions here: <a href="https://www.powerwaf.com/en/doc/dns/how-to-link-your-website-with-powerwaf-cdn/" target="_blank">Create CNAME record for PowerWAF</a>
                                </div>
                        </div>
                    </div>
HTML;
                }
            }
        }




        echo <<<HTML
        <ol>
            <li>If you haven't already done so, please create an account at <a href="https://cloud.powerwaf.com/register" target="_blank">https://cloud.powerwaf.com/register</a></li>
            <li>Get your API credentials in "Account" > "Company Profile" > "API Credentials" in you PowerWAF account.</li>
        </ol>
        </div><br>
HTML;

        // Render form
        echo '<form method="post" action="options.php">';
        settings_fields( 'powerwaf_settings_group' );
        do_settings_sections( 'pwaf_settings' );
        submit_button();
        echo '</form>';
        pwf_dashboard::endPage();

    }

    public function renderError($response) {

        $options = $this->powerwaf_settings_options;

        switch ($response->errorcode) {
            case 101:  // Bad credentials
                echo sprintf('<div class="columns">
    <div class="column is-half">
        <article class="message is-danger is-light">
            <div class="message-body">
                Error connecting to the server: <strong>invalid credentials</strong>. (Code %s)<br>
                Please check your credentials.<br>
            </div>
        </article>
    </div>
</div>', esc_html($response->errorcode));
                break;

            case 103:  // Unknown site
                echo sprintf('<div class="columns">
                <div class="column is-half" >
                    <article class="message is-info" style="border: 1px solid darkblue">
                        <div class="message-header">
                                <p>Adding site in PowerWAF CDN</p>
                        </div>
                        <div class="message-body">
                        To continue with the configuration you need to add the site <strong>%s</strong> to your PowerWAF CDN account.<br><br>
                        To do this please follow the next steps:<br><br>
                        
                        <ol style="list-style-position: inside">
                            <li>Log into your PowerWAF account</li>
                            <li>Choose the "Protected sites" menu</li>
                            <li>Add the site <strong>%s</strong></li>
                            <li>Reload this page</li>
                        </ol><br><br>
                       

                        Or, if you prefer, we can try to add the site directly from here.
                        </div>
                    </article>
                    <div class="buttons">
                      <a href="?page=pwaf_settings&action=addsite" class="button is-info">Add site from here</a>
                      <a href="javascript:location.reload()" class="button is-info">Reload page</a>
                    </div>
                </div>
            </div>', esc_html($options['domain']), esc_html($options['domain']));
                break;

            case 104: // Error adding site:
                echo sprintf('<div class="columns">
                <div class="column is-half" >
                    <article class="message is-danger" style="border: 1px solid darkred">
                        <div class="message-header">                            <p>Error adding site in PowerWAF CDN</p>
                        </div>
                        <div class="message-body">
                        Error trying to add the site <strong>%s</strong> to your PowerWAF CDN account.<br><br>
                        The server said: <strong>%s</strong><br><br>
                        Please solve the problem and try again.
                        </div>
                    </article>
                    <div class="buttons">
                      <a href="?page=pwaf_settings" class="button is-info">Return</a>                    </div>
                </div>
            </div>', esc_html($options['domain']), esc_html($response->errormsg));
                break;

            default:
                echo sprintf('<div class="columns">
    <div class="column is-half">
        <article class="message is-danger is-light">
            <div class="message-body">
                Server error: <strong>%s</strong>. (Code %s)<br>
            </div>
        </article>
    </div>
</div>', esc_html($response->errormsg), esc_html($response->errorcode));
                break;

        }
    }

    public function powerwaf_settings_page_init() {
        register_setting(
            'powerwaf_settings_group', // option_group
            'powerwaf_settings', // option_name
            array( $this, 'powerwaf_settings_sanitize' ) // sanitize_callback
        );

        add_settings_section(
            'powerwaf_settings_setting_section', // id
            'Settings', // title
            array( $this, 'powerwaf_settings_section_info' ), // callback
            'pwaf_settings' // page
        );

        add_settings_field(
            'api_user', // id
            'API User', // title
            array( $this, 'api_user_callback' ), // callback
            'pwaf_settings', // page
            'powerwaf_settings_setting_section' // section
        );

        add_settings_field(
            'api_password', // id
            'API Password', // title
            array( $this, 'api_password_callback' ), // callback
            'pwaf_settings', // page
            'powerwaf_settings_setting_section' // section
        );

        add_settings_field(
            'domain', // id
            'Domain', // title
            array( $this, 'domain_callback' ), // callback
            'pwaf_settings', // page
            'powerwaf_settings_setting_section' // section
        );

        add_settings_field(
            'devicetypecache',
             'Enable cache by device type',
            array($this,'devicetypecache_callback'),
            'pwaf_settings',
            'powerwaf_settings_setting_section'
        );

        add_settings_field(
            'disablefrontendcacheadmin',
            'Disable front-end caching for logged-in users',
            array($this,'disablefrontendcacheadmin_callback'),
            'pwaf_settings',
            'powerwaf_settings_setting_section'
        );

    }
    public function powerwaf_settings_sanitize($input) {
        error_log(print_r($input,true));
        $sanitary_values = array();
        if ( isset( $input['api_user'] ) ) {
            $sanitary_values['api_user'] = sanitize_text_field( $input['api_user'] );
        }

        if ( isset( $input['api_password'] ) ) {
            $sanitary_values['api_password'] = sanitize_text_field( $input['api_password'] );
        }

        if ( isset( $input['domain'] ) ) {
            $sanitary_values['domain'] = sanitize_text_field( $input['domain'] );
        }

        if ( isset( $input['devicetypecache'] ) ) {
            $sanitary_values['devicetypecache'] = $input['devicetypecache'];
        }

        if ( isset( $input['disablefrontendcacheadmin'] ) ) {
            $sanitary_values['disablefrontendcacheadmin'] = $input['disablefrontendcacheadmin'];
        }

        return $sanitary_values;
    }
    public function powerwaf_settings_section_info() {

    }

    public function api_user_callback() {
        printf(
            '<input class="regular-text" type="text" name="powerwaf_settings[api_user]" id="api_user" value="%s">',
            isset( $this->powerwaf_settings_options['api_user'] ) ? esc_attr( $this->powerwaf_settings_options['api_user']) : ''
        );
    }
    public function api_password_callback() {
        printf(
            '<input class="regular-text" type="password" name="powerwaf_settings[api_password]" id="api_password" value="%s">',
            isset( $this->powerwaf_settings_options['api_password'] ) ? esc_attr( $this->powerwaf_settings_options['api_password']) : ''
        );
    }
    public function domain_callback() {
        $siteurl=get_site_url();
        $siteurl = preg_replace('#^https?://#i', '', $siteurl);
        printf(
            '<input class="regular-text" type="text" name="powerwaf_settings[domain]" id="domain" value="%s">',
            !empty( $this->powerwaf_settings_options['domain'] ) ? esc_attr( $this->powerwaf_settings_options['domain']) : esc_attr($siteurl)
        );
    }

    public function devicetypecache_callback() {
        printf(
            '<input type="checkbox" name="powerwaf_settings[devicetypecache]" id="devicetypecache" value="1" %s>',
            ( isset( $this->powerwaf_settings_options['devicetypecache'] ) && $this->powerwaf_settings_options['devicetypecache'] === '1' ) ? 'checked' : ''
        );
    }

    public function disablefrontendcacheadmin_callback() {
        printf(
            '<input type="checkbox" name="powerwaf_settings[disablefrontendcacheadmin]" id="disablefrontendcacheadmin" value="1" %s>',
            ( isset( $this->powerwaf_settings_options['disablefrontendcacheadmin'] ) && $this->powerwaf_settings_options['disablefrontendcacheadmin'] === '1' ) ? 'checked' : ''
        );
    }


}
if ( is_admin() ) {
    $powerwaf_settings = new pwf_settings();

}
/*
 * Retrieve this value with:
 * $powerwaf_settings = get_option( 'powerwaf_settings' ); // Array of All Options
 * $api_user = $powerwaf_settings['api_user']; // API User
 * $api_password = $powerwaf_settings['api_password']; // API Password
 * $domain = $powerwaf_settings['domain']; // Domain
 */

